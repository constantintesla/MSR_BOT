import os
import streamlit as st
import database
import asyncio
from dotenv import load_dotenv

load_dotenv()
GROUPS = [int(x) for x in os.getenv("GROUPS", "").split(",") if x]
SUPER_ADMINS = [int(x) for x in os.getenv("SUPER_ADMINS", "").split(",") if x]


def run_async(coro):
    return asyncio.run(coro)


@st.cache_resource
def init_db():
    run_async(database.init())


init_db()

st.sidebar.title("MSR Admin")

groups = run_async(database.get_groups_info())
group_dict = {title: cid for cid, title in groups}
if not group_dict:
    group_dict = {str(cid): cid for cid in GROUPS}

selected_title = st.sidebar.selectbox("–ì—Ä—É–ø–ø–∞", list(group_dict.keys()))
chat_id = group_dict[selected_title]

tab1, tab2, tab3, tab4, tab5 = st.tabs(["–í–æ–ø—Ä–æ—Å—ã", "–î–æ–±–∞–≤–∏—Ç—å", "–ü–æ–ø—ã—Ç–∫–∏", "–ê–¥–º–∏–Ω—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

with tab1:
    st.header("–í–æ–ø—Ä–æ—Å—ã")
    questions = run_async(database.get_questions(chat_id))
    if questions:
        for qid, q, a in questions:
            col1, col2 = st.columns([4, 1])
            col1.write(f"{q} ‚Üí {a}")
            if col2.button("üóë", key=f"del_{qid}"):
                run_async(database.delete_question(qid))
                st.experimental_rerun()
    else:
        st.info("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")

with tab2:
    st.header("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
    question = st.text_input("–í–æ–ø—Ä–æ—Å")
    answer = st.text_input("–û—Ç–≤–µ—Ç")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å", key="add_question"):
        run_async(database.add_question(chat_id, question, answer))
        st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ!")

with tab3:
    st.header("–ü–æ–ø—ã—Ç–∫–∏")
    current = run_async(database.get_max_attempts(chat_id))
    new_val = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫", min_value=1, max_value=10, value=current)
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key="save_attempts"):
        run_async(database.set_max_attempts(chat_id, new_val))
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

with tab4:
    st.header("–ê–¥–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã")
    admins = run_async(database.get_group_admins(chat_id))
    if admins:
        st.write("–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã:")
        for uid in admins:
            st.write(uid)
    else:
        st.write("–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤")

    new_admin = st.number_input("ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞", min_value=1, step=1)
    if st.button("–î–æ–±–∞–≤–∏—Ç—å", key="add_admin"):
        run_async(database.add_admin(chat_id, new_admin))
        st.success("–î–æ–±–∞–≤–ª–µ–Ω!")

with tab5:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    total, ok, bad, rows = run_async(database.get_stats(chat_id))
    st.metric("–í—Å–µ–≥–æ", total)
    st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω–æ", ok)
    st.metric("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", bad)
    if rows:
        st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ:")
        for un, q, ans, ok_flag in rows:
            mark = "‚úÖ" if ok_flag else "‚ùå"
            st.text(f"{mark} {un}: {q} ‚Üí {ans}")

st.sidebar.markdown("---")
st.sidebar.caption("–°–æ–∑–¥–∞–Ω–æ –Ω–∞ Streamlit")